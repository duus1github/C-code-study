一、简答题（每小题10分，共30分）
1.简述c程序的开发步骤及各步骤的作用。
答：(1).问题分析，对于接收的任务要认真分析，研究给定的条件分析最后应选到的目标找出解决问题的规律，选择解题的方法。
   (2).设计算法，即设计出解题的方法和具体步骤。
   (3).编写程序，根据得到的算法，用一种高级语言编写出源程序。
   (4).对源程序进行编辑，编译和连续，得到可执行程序
   (6).运行程序，分析结果，对结果对其分析，看它是否合理。对不符合结果的要对程序进行调试，经过试调得到了正确的结果。
   (7).编写程序文档，内容包括程序名称、程序功能、运行环境、程序的装入和启动、需要输入的数据以及使用的注意事项等。
       许多程序是提供给别人使用的提供程序文档方便用户的使用。
题目出处：第一章1.6程序设计的任务。  

2.简述动态存储变量和静态存储变量的特点。
答：动态存储：auto关键字定义的变量，c中默认为auto,即不添加任何关键字修饰，它的值随着函数运行结束而消失。
   静态存储：使用关键字static修饰的变量，只限于本函数使用，且该值会一直存在，函数调用结束时，该值取最后函数结束时的值，在此调用时也取上次最后调用的值。
题目出处：第7章7.9.1  

3.函数声明和函数定义的区别。
答：函数声明：一般是在一个函数内，需要调用其他函数时，预先对其进行声明，好让c对该函数进行编译。
   函数定义：即定义一个新的方法，是用于处理事件的算法。
题目出处：第7章7.1
二、程序阅读题（每小题4分，共20分）
1.
#include<stdio.h>
void main(){
  int x=3;		
  do{			        //使用do……while循环，至少执行一次，
    printf("%3d",x-=2); 	//x-=2,即x=x-2,所以x=1，输出1 	
  }while(!(--x));	        //执行--x后，x=0,!0为真，继续再次循环，x=0-2=-2,输出-2，
			       //判断!(-2)为假，程序结束
}
程序运行后输出的结果为：1 -2
总结：c语言中一数值1代表‘真’，以0代表‘假’，则!0为‘真’(注：将!0认为是真)。
考点：--x,x-=2等关系运算式

2.（错）
#include<stdio.h>
void main(){
  int i,j,n=5;		        //定义n=5，外层循环在1-5之间
  for(i=1;i<=n;i++){	    	//定义外层循环，循环5次
    for(j=1;j<=n-1;j++)  	//定义内存循环一，执行n-1次，且输出都是空格，即每行的最前面空4个空格
      printf(" ");
    for(j=1;j<=i;j++)	 	//定义内存循环二，执行外层循环的i次，并且输出j控制输出i的次数，
      pritnf("%d",i);
    printf("\n");	      	//外层循环的换行操作。
  }
}
输出结果为： 1    正解：  1
            2           22
            3           333
            4           4444
            5           55555
总结：如果在循环操作不确定时，可以在草稿纸详细进行演算，以得出答案，必须认真对待每一个分值。
考点：嵌套for循环的调用

3.（错）
#include<stdio.h>
void main(){
  int x;
  printf("enter x");	    	//用户输入数据
  scanf("%d",&x);	      	//用户接收数据
  while(x!=0){		      	//使用while循环，判断条件为x!=0
    printf("%d",x%10);		//循环输出x%10,即每次输出x除以10的余数
    x=x/10;		        //循环执行x/10,整除。
  }
}
程序输入123，运行后的输出结果为：232   正解：321
总结：输入123，(1).x%10余数为3，(2).x/10,即123整除10=12。(3).x%10即12%10，余数为2。(4).12/10=1。(5).1%10的余数为1.，
     所以正好输出321.
考点：正确区分/整除，%求余两者之间的区别。  

4.（错）
#include<stdio.h>
void main(){
  int a[10],*p,*q,r;		//定义两个指针变量
  p=&a[3];		      	//p指向a的第4个元素
  q=&a[6];		      	//q指向a的第7个元素
  r=q-p;		        //p232两个指针相减：两个地址之差（除以）数组元素的长度，即两个元素之间的相对距离
  printf("%d\n",r);
}
程序运行后输出结果：12   正解：3
总结：两个执行相减，即为两个元素间的相对距离。
考点：指针两个元素相减：两个地址之差（除以）数组元素的长度，即两个元素之间的相对距离。
题目出处：p232 8.3.2

5.
#include<stdio.h>
void main(){
  int a[10],i,k=0;	   	//定义数组a有10个元素
  for(i=0;i<10;i++)	   	//for循环数组，并对每个元素进行赋值
    a[i]=i;
  for(i=1;i<4;i++)	   	//循环数组1-4之间
    k+=a[i]+i;		      	//对k进行赋值
    printf("%d\n",k);		//for循环中输出k的值
}
程序运行输出结果：12
总结：可以看出a[10]为i-9之间的10个整数，第二个for循环即为控制输出k的值，这里k是通过关系运算符进行计算。
考点：for循环，for循环中的输出，混合运算表达式：先算等号右侧。

三、根据流程图写程序（每小题10分，共20分）
(1)根据下面流程图，写出相应的程序。
#include<stdio.h>
int main(){
  int i=1,s=0;
  for(;i<=100;i++){
    s=s+i;
  }
  printf("%d",s);
  return 0;
}
(2)根据下面流程图，写出相应的程序。
#include<stdio.h>
int main(){
  int a,b,c;
  printf("请输入a,b的值：\n");
  scanf("%d,%d",&a,&b);
  if(b>=0){
    c=a+b;
  }else
    c=a-b;
  printf("%d",c);
  return 0;
}
四、程序填空题（每空两分，共20分）
1.单链表的插入
int ListInsert_L(NODE *L,int i,int x)/*待头结点的线性列表L中第i个位置之前插入元素x*/
{
  NODE *p,*s;
  int j=0;
  while((1) && j<i-1){
    (2)
    ++j;
  }               //寻找第i-1个结点
  if(!p||j>i-1)
    return (0);   //插入位置错误
  s=(NODE *)malloc(sizeof(NODE))  //生成新结点
  s->data=x;
  (3)
  p->link=s;    //插入到列表中
  return 1;
}
填空：(1)：

2.输出100以内的素数。
#include<stdio.h>
#include<mat.h>
void main(void){
  int i,m,k;
  for(m=2;m<=100;m++){
    k=(1);
    for(i=(2);i<=k;i++){
      if(m%i==0)
        break;
      if(i>=k+1)      
        printf("%d",m);
    }
  }
}
填空：(1):m-1   (2):1    正解：(1):sqrt(m)  (2):2
总结：(1):sqrt(m)即每次对m在次开方，二层循环2-sqrt(m)循环，只要使m能被2-sqrt(m)中任意个数整除就可以称为素数。
题目出处：例5.10.
注：原题有错误：if(i>k+1) 应该为if(m>k+1)

3.判断字符串是否是回文，是返回1，不是返回0
int fun(char str[]){
  int i,n,k.flag=1;
  for(n=0;str[n]!='\0';n++)    //计算字符串的长度
  for(k=0;(1);k++)      
    if((2)){
      flag=0;
      (3)
    }
  return flag;
}
填空：(1):k<n  (2):str[k]!=str[n-k-1]  (3):break  订正：(1)k<n/2
题目出处：第六章习题5是同一类型的题目。
总结：循环n/2,即找中间数，每次以中间对数对称的两个数进行比较。如果有一个数不一样就直接终止循序。

4.从键盘上输入9个整数，保存在二维数组中，按数组原来的位置输出第一行和第一列的所有元素
#include<stdio.h>
void main(){
  int a[3][3],i,j;
  for(i=0;i<3;i++)
    for(j=0;j<3;j++)
      scanf("%d",(1));
  fo(i=0;i<3;i++)      
    for(j=0;j<3;j++)
      if((2))
        printf("%d",a[i][j]);
  printf("\n");
}
填空：(1):&a[i][j]  (2):i>=2&&j>=2   订正：i==0 || j==0
总结：输出第一行和第一列的数据，即输出a[0][0]a[0][1]a[0][2] 和a[0][0]a[1][0]a[2][0]
      观看规律，得到i=0时，j=0时都会输出。
      读懂题意，找出规律再作答，最好在草稿纸上画出结果，便于寻找规律。  
      
五、程序设计题
1.任意读取一个整数，依次输出其符号及从低位到高位上的数字
#include<stdio.h>
int main(){
  /*
   计算输入的字符的长度，循环求余。
   */
  int num,i=10;
  char sign;
  printf("请输入任意数字：\n");
  scanf("%d",num);
  if(num>=0){
    sign='+';
  }else if(num<0){
    sign='-';
  }
  printf("%c",sign);
  while(n!=0){
    n=num%i;
    num=n;
    printf("%d",n);
  }
  return 0;
}
订正：
#include<stdio.h>
int main(){
  /*
   计算输入的字符的长度，循环求余。
   */
  int num,i;
  //todo:定义字符变量用于存放符号
  char sign;
  //todo:接收用户输入的数字
  printf("请输入任意数字：\n");
  scanf("%d",&num);
  //判断数字的符号
  if(num>=0){
    sign='+';
  }else if(num<0){
    sign='-';
  }
  printf("%c",sign);
  //对输入的数据进行循环处理，并输出每位数字
  //使用do……while()循环更合适。
  do{
    i=num%10;		//每次除以10，求得它的余数
    printf("%d",i);	//输出这个余数
    num=num/10;		//每次整除10，即降位。
  }while(num!=0);	//如果正好num每杯整除，则说明已经是个位数了，结束循环
  return 0;
}
总结：
    错误原因：(1)没有降位运算，自己误以为%10与/10同样的效果。
    	     (2)使用do……while()循环更加合适。
    思考：在做此类题型时，1.要分析题目中的规律，最好是先画流程图，
    			2.判断使用哪一种循环，不要上来就使用for,或者while循环，要用最合适的循环。

2.求sin(x)的近似值，(x是弧度)，计算公式如下；
  sin x=x-x^3/3!+x^5/5!+x^7/7!+……+((-1)^(n+1)x(-2n-1))/(2n-1)!+……
  考虑适当的精确度求，假设n=10.
#incldue<stdio.h>
//定义函数来求幂的值
double power(double m,double n){
  /*
   * m:为基数，n:为幂
   */
  int i;
  double pw=1;
  for(i=1;i<=n;i++){
    pw*=i;
  }
  return pw
}
//定义求阶乘的值
double fac(int n){
  int i;
  double num=0;
  for(i=1;i<=n;i++){
    i*=i;
    num +=i;
  }
  return num;
}
int main(){
  /* 
   * 思路：for循环，代入公式计算
   */
  int n=10;
  double x,sin_,num;
  printf("请输入x的值：\n");
  scanf("%f",&X);
  for(n=1,n<=10;n++){
    num =power(-1,n)*power(x,2n-1)/fac(2n-1)
    sin_+=num;
  }     
  printf("sin_%d=%f",n,sin_);
  return 0;
}
订正：
#include<stdio.h>
#include<math.h>
void main()
{
	int  i;
	float  x,sum,a,b;  //sum代表和，a为分子，b为分母
	char s;
	printf("please input x");
	scanf("%f",&x);
	s=1;
	sum=0;
	a=x;     //分母赋初值
	b=1;     //分子赋初值
	for(i=1;a/b>=1e-6;i++)
	{
	    sum=sum+s*a/b;    	//累加一项
	    a=a*x*x;     	//求下一项分子
	    b=b*2*i*(2*i+1);   	//求下一项分母
	    s*=-1;
	}
	printf("sum=%f\n",sum);
}

3.设有三个候选人，每次输入一个得票的候选人的名字，要求最后输出各人得票结果。30个人进行投票。
struct person{
  char name[20];
  int count;
}candidates[3]={"Li",0,"zhang",0,"liu",o};
#include<stdio.h>
int main(){
  int i,j,n=30;
  char name;(错:该类型的定义要与struct类型一致。)
  for(i=1;i<=30;i++){
    scanf("%c",name);(错:应该使用%s,因为用户输入的name是一个字符串)
    for(j=0;j<3;j++){
      if(name ==candidates[i].name) （错:应该使用strcmp(str1,str2)==0来进行判断两个字符串相等）
        candidates[i].count++;
    }
  }
  //最后输出结果
  for(j=0;j<3;j++){
    printf("%c,%d",candidates[i].name,candidates[i].count);(错:输出的name类型格式为%s).
  }
  return 0;
}
订正：
#include<stdio.h>
#include<string.h>
struct Person{
    char name[20];
    int count;
}leader[3]={"Li",0,"Zhang",0,"Sun",0};
int main(){
    //定义字符数组
    char leader_name[20];	//与struct中的名字长度一致
    int count,i,j;
    for(i=1;i<=5;i++){
	scanf("%s",leader_name);//接收用户所选的人名
	for(j=0;j<3;j++){
	    if(strcmp(leader_name,leader[j].name)==0)
		leader[j].count++;
	}
    }
    printf("\nResult:\n");
    for(i=0;i<3;i++){
	printf("%5s:%d\n",leader[i].name,leader[i].count);
    }
    return 0;
}
题目出处：例9.3.
考点：结构体的简单使用。
总结；在使用结构体使要充分使用数组循环得到个体，然后.元素变量来进行操作。























