一：例题：
例1：对10个数组元素依次赋值为0,1,2,3,4,5,6,7,8,9，要求逆序输出。
#include<stdio.h>
#include<math.h>
int main(){
    int a[10];
    for(int i=0;i<10;i++){
	a[i]=i;
    }
    //逆序输出，可以按照下标从大到小进行输出。
    for(int j=9;j>0;j--){
	printf("a[%d]=%d\n",j,a[j]);
    }
    return 0;
}
例2：用数组来处理fibonacci数列问题。
#include<stdio.h>
#include<math.h>
int main(){
    int i;
    int f[20]={1,1};  		//定义数组，并初始化前两个都为1的数
    for(i=2;i<20;i++){		//使用for循环，对f数组的每个元素进行赋值
	    f[i]=f[i-2]+f[i-1];
    }
    for(i=0;i<20;i++){		//输出f数组，判断i能被5整除就换行。
    if(i%5==0){
        printf("\n");
    }
	  printf("%12d",f[i]);
    }
    return 0;
}
例3:有10个地区的面积，要求对他们按由小到大的顺序排列。
#include<stdio.h>
#include<math.h>
int main(){
    /*
     * 排序是一种重要的基本的算法，排序的方法跟多，本例用“起泡法排序”，也称之为冒泡排序。
     * 	基本思路：每次讲相邻的两个数比较将小的调剂到前头，
     */
    int a[10];
    int i,j,temp;
    printf("请输入10个数：\n");
    //for循环输入10个数
    for(i=0;i<10;i++)
	scanf("%d,",&a[i]);
    //对数组进行排序
    for(i=0;i<9;i++){
    for(j=0;j<9-i;j++){
        if(a[j]>a[j+1]){
      temp=a[j];
      a[j]=a[j+1];
      a[j+1]=temp;
        }
    }
    }
    for(i=0;i<10;i++)
	    printf("%d",a[i]);
    return 0;
}
例4、将一个二维数组行和列的元素互换，存到另一个二维数组中.
#include<stdio.h>
#include<math.h>
int main(){
   int a[2][3]={{1,2,3},{4,5,6}};
   int b[3][2];
   for(int i=0;i<2;i++){
       for(int j=0;j<3;j++){
	   b[j][i]=a[i][j];
       }
   }
   //输出b数组的各项元素
   for(int i=0;i<3;i++){
       for(int j=0;j<2;j++)
	   printf("%d ",b[i][j]);
       printf("\n");
   }
    return 0;
}
例5.有一个3x4的矩阵，要求编程序求出其中最大的那个元素的值以及其所在的行号和列号。
#include<stdio.h>
#include<math.h>
int main(){
    /*
     * 使用打擂台算法，即先设最大值为max=a[0][0],遍历数组，与max进行比较，如果比它大没就互换值，来求出最大猴子。
     */
    int a[3][4]={{6,7,8,9},{2,4,5,6},{1,2,3,4}};
    int max=a[0][0],i,j,col=0,row=0;  // 定义最大值为a[0][0],行row,列col.
    for(i=0;i<3;i++){
	    for(j=0;j<4;j++){
	      if(a[i][j]>a[0][0]){
          max=a[i][j];
          row=i;
          col=j;
	      }
	    }
    }
    printf("最大值为%d,行号%d列号%d",max,row,col);
    return 0;
}
3.应用字符串数组的元素
例6、输出一个已知的字符串。
#include<stdio.h>
#include<math.h>
int main(){
    //注，char类型时如果定义空字符，必须加上空格，''——>' '
    //定义一个字符串
    char a[15] ={'I', ' ', 'a', 'm', ' ', 's', 't', 'u', 'd', 'e', 'n', 't','.'};
    int i;
    //输出字符串
    for(i=0;i<15;i++){
	    printf("%c",a[i]);
    }
    printf("\n");
    return 0;
}
例9：有3个字符串，找出其中的最大者。
#include<stdio.h>
int main(){
    char str[3][20];			// 定义一个 二维数组
    char temp[20];			//定义一个一维数组，用于交换字符的临时字符数组
    int i;
    for(i=0;i<3i++;)
	gets(str[i]);			// 输入3个字符串，分别赋值给str[0],str[1],str[2]
    if(strcmp(str[0],str[1])>0){	//若str[0]大于str[1]
	strcpy(temp,str[0]);		//把str[0]的字符串赋值给字符数组temp（临时存放）
    }else{				//str[0]<str[1]
	strcpy(temp,str[1]);		//把str[1]的字符串赋值给字符数组temp（临时存放）
    }
    if(strcmp(str[2],temp)>0){		//str[2]与temp比较
	strcpy(temp,str[2]);		//大于就把str[2]的字符串赋值给字符数组temp（临时存放）
    }
    printf("字符串的最大值是%s",temp);
    return 0;
}
二、课后习题
1.用筛选法求100之内的素数。
/**
 * 第六章:
 * 		1、用筛选法求100以内的素数
 * 	什么是筛选法：
 * 		1、得到1-100个整数，然后逐个判断他们是否是素数，找到非素数，就把他吃掉，最后剩下的就是素数
 * 	具体思路：
 * 		1、先将1挖掉，因为1不是素数
 * 		2、用2去除以后面的各个数将能整除2的数的挖掉
 * 		3、用3去除以他后面的书，将3的倍数也都挖掉
 * 		4、。。。。依次类推
 * 		注：这里说的挖掉这个数的方法是：设定a[j]=0,然后输出时只需要判断不为0 的输出即可
 *
 */
#include<stdio.h>
#include<math.h>
int main() {
	//TODO:1、先用for循环获取到1-100个数，用数组存储
	int arr[100];
	for (int i = 0; i < 100; i++)
		arr[i] = i;
	//TODO:2、后面的每一个数依次除2，除3，除4，，，所以需要两层循环
	for (int i = 2; i < sqrt(100); i++) {
		for (int j = i + 1; j <= 100; j++) { //这里使用j=i+1,表示2以后的所有的数，他用来被2除，被3除，，，
			if (arr[i] != 0 && arr[j] != 0) {//这里做一层判断是有意义的，因为被除数不能为0 ，也就是分母不能为0
				if (arr[j] % arr[i] == 0) //如果能被整除，就直接摈弃这个数，即设定其的值为0.
					arr[j] = 0;
			}
		}
	}
	//TODO:3、输出值
	int n=0;
	for (int i = 0; i <100; i++) {
		if (arr[i] != 0 && arr[i] != 1){
			printf("%5d,", arr[i]);
			n++;
		}
		//每隔5个，换行
		if (n == 5){
			printf("\n");
			n=0;
		}
	}

	return 0;
}
2.用选择法对10个整数进行排序
#include<stdio.h>
int main(){
    /*
     * 假定一个小的数，然后与之比较，然后进行跟换下标
     */
    int a[10]={1,2,3,5,6,7,4,9,8,12};
    int min,mid;
    for(int i=0;i<10;i++){
	min = i;
	for(int j=i+1;j<10;j++){
	    if(a[min]>a[j]){		//自定义的a[min]与二轮循环的a[j]进行比较，如果大就交换下标
		min=j;			//先进行下标交换
		mid=a[i];		//再交换值
		a[i]=a[j];
		a[j]=mid;
	    }
	}
    }
    // 输出排序之后的结果
    for(int i=0;i<10;i++){
	printf(" %d",a[i]);
    }
    return 0;
}
/**
 * 第六章:
 * 	3、求一个3X3的整形矩阵对角元素之和
 */
#include<stdio.h>
int main() {
	//TODO:定义一个二维矩阵，并用for循环进行赋值
	int arr[3][3],sum=0;
	for(int i=0;i<3;i++)
		for(int j=0;j<3;j++)
			arr[i][j]=(i+1)*(j+1);
	//TODO:输出这个原始的3维矩阵
	for(int i=0;i<3;i++){
			for(int j=0;j<3;j++)
				printf("%3d",arr[i][j]);
			printf("\n");
	}
	//TODO:获取对角元素的和
	for(int i=0;i<3;i++){
			for(int j=0;j<3;j++){
				if(i==j)
					sum+=arr[i][j];
			}
	}
	printf("矩阵对角元素之和为%d",sum);
	return 0;
}	
4.有一个已排好序的数组，要求输入一个数后，按原来排序的规律将它插入数组中。
#include<stdio.h>
int main(){
    /*
     * 一个已经排好序的数组，插入数据按照次序插入
     *	思路：1.建立一个有序数组，输入一个数
     *	    2.将该数与数组中的数进行比较，遇到大于他的数时，就交换下标，并将大于的数下标加一
     */
    int a[11]={1,4,6,9,13,16,19,28,40,100};//预先设定数组的长度为11,因为添加元素之后正好是11
    int temp1,temp2,num,end,i,j;
    //先对数组a进行输出
    for(i=0;i<11;i++)
	printf("%5d",a[i]);  		// %5d：指定输出数据占5列，输出的数据显示在5列区域的右侧
    printf("\n");
    // 插入数据
    scanf("%d",&num);
    end=a[9];				//定义最后元素
    if(num>end){ 			//如果输入的数大于a[9],即为大于最后一个数，就直接添加至末尾
	a[10]=num;
    }else{				//如果输入的数是1-100之内的数
	for(i=0;i<10;i++){		//一层for循环原本数组的值
	    if(a[i]>num){		//输入的数与原数组元素进行比较
		temp1=a[i];		//遇到大的就将值进行替换
		a[i]=num;
		for(j=i+1;j<11;j++){	//二层for循环，注对后面的下标进行跟换
		    temp2=a[j];		//对插入之后的数值都进行值替换。
		    a[j]=temp1;
		    temp1=temp2;
		}
		break;			//突出循环,因为只有一个数，遇到之后就循环一次即可，
	    }
	}
    }
    printf("Now array a:\n");
    for (i = 0; i < 11; i++)
	printf("%5d", a[i]);
    printf("\n");
    return 0;
}
5.将一个数组中的值逆序重新排放，例如原来顺序为8,6,5,4,1.要求改为1,4,5,6,8.
#include<stdio.h>
#define N 5
int main(){
    /*
     * 直接for循环,将对称的值进行互换
     */
    int a[N],i,temp;
    //输入6个随机数
    for(i=0;i<N;i++){
	scanf("%d",&a[i]);
    }
    //for循环，将对称的两值互换
    for(i=0;i<N/2;i++){
	temp=a[i];
	a[i]=a[N-i-1];
	a[N-i-1]=temp;
    }
    //输出
    for(i=0;i<N;i++)
	printf("%d",a[i]);
    return 0;
}
6.输出杨辉三角（要求输出10行）
#include<stdio.h>
#define N 10
int main(){
    /*
     * 定义二维数组，长度为10，
     */
    //定义二维数组长度为10
    int i,j,a[N][N];
    for(i=0;i<N;i++){
	a[i][i]=1;		//定义斜的那部分为1
	a[i][0]=1;		//竖的那部分的值也都为1
    }
    for(i=2;i<N;i++){
	for(j=0;j<=i-1;j++){
	    a[i][j]=a[i-1][j-1]+a[i-1][j];//后一列数等于前一列相邻2个数的和
	}
    }
    //输出数组，即为杨辉三角
    for(i=0;i<N;i++){
	for(j=0;j<=i;j++)
	    printf("%6d",a[i][j]);
	printf("\n");
    }
    printf("\n");
    return 0;
}
7.输出魔方阵所谓模仿阵即每一行，每一列与对角线之和均相等，要求输出1-n^3的自然数构成的模仿阵。
#include<stdio.h>
#define N 15
int main(){
    /*
     * 此方法是按照魔方阵的规律。
     */
    int a[N][N],i,j,k,p,n;
    p=1;
    while(p==1){
	//输入15个数
	scanf("%d",&n);
	if((n!=0)&&(n<=15)&&(n%2!=0)){
	    p=0;
	}
    }
    for(i=1;i<=n;i++){			//现处理第一行
	for(j=1;j<=n;j++)
	    a[i][j]=0;			//先令所有元素都为0
    }
    j=n/2+1;				//获取j的位置
    a[1][j]=1;				//将1放在第一行中间一列
    for(k=2;k<=n*n;k++){		//在从2开始处理
	i=i-1;				//存放的行比前一个数的行数减1
	j=j+1;				//存放的列比前一个数的列加1
	if((i<1)&&j>n){			//前一个数是第一行第N列时把下一个数放在上一个数的下面
	    i=i+2;
	    j=j-1;
	}else{
	    if(i<1) i=n;		//当行数减到第一行，返回到最后一行
	    if(j>i) j=1;		//当列数减到最后一行，返回到第一行
	}
	if(a[i][j]==0){			//如果该元素为0,则继续执行程序
	    a[i][j]=k;
	}else{				//如果该元素不为0,就说明要填的数的位置已经被占则该数放在上一个数的下面，
	    i=i+2;
	    j=j-1;
	    a[i][j]=k;
	}
    }
    // 输出数组
    for(i=1;i<=n;i++){
	for(j=1;j<=n;j++){
	    printf("%5d",a[i][j]);
	}
	printf("\n");
    }
    return 0;
}
8.找出一个二维数组的中的鞍点，即该位置上的元素在该行上最大，在该列上最小，也可能没有鞍点。
#include <stdio.h>
#define N 4
#define M 5                   /* 数组为4行5列 */
int main()
{
  int i,j,k,a[N][M],max,maxj,flag;
  printf("please input matrix:\n");
  for (i=0;i<N;i++)           /* 输入数组 */
     for (j=0;j<M;j++)
      scanf("%d",&a[i][j]);
  for (i=0;i<N;i++)
   {max=a[i][0];               	/* 开始时假设a[i][0]最大 */
    maxj=0;                    /* 将列号0赋给maxj保存 */
    for (j=0;j<M;j++)         /* 找出第i行中的最大数 */
	  if (a[i][j]>max)
	    {max=a[i][j];         /* 将本行的最大数存放在max中 */
	     maxj=j;              /* 将最大数所在的列号存放在maxj中 */
	    }
    flag=1;                   /* 先假设是鞍点，以flag为1代表 */
    for (k=0;k<N;k++)
	  if (max>a[k][maxj])     /* 将最大数和其同列元素相比 */
	     {flag=0;             /* 如果max不是同列最小，表示不是鞍点令flag1为0 */
	      continue;}
    if(flag)                  /* 如果flag1为1表示是鞍点 */
	{printf("a[%d][%d]=%d\n",i,maxj,max);   /* 输出鞍点的值和所在行列号 */
	 break;
	}
  }
  if(!flag)	                   /* 如果flag为0表示鞍点不存在 */
    printf("It is not exist!\n");
  return 0;
 }












